# SPDX-FileCopyrightText: 2024 Tobias BÃ¶hm <code@aibor.de>
#
# SPDX-License-Identifier: GPL-3.0-or-later

name: Test

on:
  push:
    branches: [ "**" ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GOPATH: "${{ github.workspace }}/.go"

jobs:
  go-setup:
    name: Go setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/go.sum"

      - name: Go mod download
        run: go mod download

      - name: Go mod download tools
        working-directory: .github/workflows
        run: go mod download

  go-deps-check:
    name: Go dependency check
    runs-on: ubuntu-latest
    needs:
      - go-setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/go.sum"

      - name: Go mod tidy
        run: go mod tidy && git diff --exit-code

      - name: Go mod verify
        run: go mod verify

      - name: Install govulncheck
        working-directory: .github/workflows
        run: go install golang.org/x/vuln/cmd/govulncheck

      - name: Run govulncheck
        run: govulncheck -test ./...

  go-lint:
    name: Go lint
    runs-on: ubuntu-24.04
    needs:
      - go-setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run vet with all constraints
        run: go vet -tags testing,integration,integration_guest,standalone ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: "v1.64"
          args: "--build-tags testing,integration,integration_guest,standalone ./..."

  go-test:
    name: Go test
    runs-on: ubuntu-24.04
    needs:
      - go-setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/go.sum"

      - name: Run go generate
        run: go generate -tags testdata ./...

      - name: Install go-junit-report
        working-directory: .github/workflows
        run: go install github.com/jstemmer/go-junit-report/v2

      - name: Run go tests
        run: |
          go test -v \
            -race \
            -cover \
            -covermode=atomic \
            ./... \
            | go-junit-report -set-exit-code > junit-report.xml

      - name: Upload test output
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-unit
          path: junit-report.xml

  integration-tests:
    name: Run integration tests
    runs-on: ubuntu-24.04
    needs:
      - go-setup
    container:
      image: alpine:3.21
    strategy:
      matrix:
        arch:
          - go: amd64
            apk: x86_64
            skip:
          - go: arm64
            apk: aarch64
            skip: "TestIntegration/linked"
    steps:
      - name: Install packages
        run: apk add tar "qemu-system-${{ matrix.arch.apk }}" gcc musl-dev

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/go.sum"

      - name: Run go generate testdata
        run: go generate -tags testdata ./...

      - name: Run go generate integration tests
        env:
          GOARCH: ${{ matrix.arch.go }}
        run: go generate -tags integration ./testing/...

      - name: Install go-junit-report
        working-directory: .github/workflows
        run: go install github.com/jstemmer/go-junit-report/v2

      - name: Fetch kernel files
        run: |
          sed -i "s/x86_64/${{ matrix.arch.apk }}/" /etc/apk/arch
          apk fetch --no-cache --allow-untrusted linux-virt
          tar xf linux-virt-* --wildcards -C / boot/vmlinuz-virt

      - name: Run tests
        run: |
          go test -v \
            -tags integration \
            -skip "${{ matrix.arch.skip }}" \
            -covermode atomic \
            -coverpkg "$(go list ./internal/... | tr '\n' ,)" \
            -coverprofile /tmp/cover.testing.out \
            ./testing/ \
            -kernel.path "/boot/vmlinuz-virt" \
            -force-pci \
            -verbose \
            | go-junit-report -set-exit-code > junit-report.xml

      - name: Upload test output
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-integration-${{ matrix.arch.go }}
          path: junit-report.xml

  integration-tests-modules:
    name: Run integration tests for kernel modules
    runs-on: ubuntu-24.04
    needs:
      - go-setup
    container:
      image: alpine:3.21
    env:
      GOCOVERDIR: "/tmp/gocoverdir"
      VIRTRUN_ARGS: "-kernel /boot/vmlinuz-virt \
                     -addModule /lib/modules/kernel/drivers/net/tun.ko.gz \
                     -addModule /lib/modules/kernel/drivers/net/veth.ko.gz \
                     -smp 2 \
                     -transport pci \
                     -verbose \
                     -debug"
    strategy:
      matrix:
        arch:
          - go: amd64
            apk: x86_64
          - go: arm64
            apk: aarch64
    steps:
      - name: Install packages
        run: apk add tar "qemu-system-${{ matrix.arch.apk }}"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/go.sum"

      - name: Create gocoverdir
        run: mkdir -pv "${{ env.GOCOVERDIR }}"

      - name: Run go generate
        run: go generate ./...

      - name: Install go-junit-report
        working-directory: .github/workflows
        run: go install github.com/jstemmer/go-junit-report/v2

      - name: Build virtrun
        run: go build -cover -covermode atomic -o /virtrun .

      - name: Fetch kernel files
        run: |
          sed -i "s/x86_64/${{ matrix.arch.apk }}/" /etc/apk/arch
          apk fetch --no-cache --allow-untrusted linux-virt
          tar xf linux-virt-* --wildcards -C / \
            boot/vmlinuz-virt \
            lib/modules/*/kernel/drivers/net/veth.ko.gz \
            lib/modules/*/kernel/drivers/net/tun.ko.gz
          ln -s /lib/modules/*/kernel /lib/modules/

      - name: Run test
        env:
          GOARCH: "${{ matrix.arch.go }}"
        run: |
          go test -v \
            -tags integration_guest \
            -exec "env GOCOVERDIR=${{ env.GOCOVERDIR }} /virtrun" \
            -cover \
            -covermode atomic \
            -coverprofile /tmp/cover.out \
            ./testing/guest/ \
            -testModules tun,veth \
            -cpus 2 \
            | go-junit-report -set-exit-code > junit-report.xml

      - name: Run covdata
        run: go tool covdata percent -i "${{ env.GOCOVERDIR }}"

      - name: Upload test output
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-integration-with-modules-${{ matrix.arch.go }}
          path: junit-report.xml

  reuse-lint:
    name: FSFE REUSE Compliance Check
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v5

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

  goreleaser-lint:
    name: Goreleaser check
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: false

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: nightly
          args: check

  results:
    if: always()
    runs-on: ubuntu-24.04
    name: Test Results
    needs:
      - go-deps-check
      - go-lint
      - go-test
      - integration-tests
      - integration-tests-modules
      - reuse-lint
      - goreleaser-lint
    steps:
    - run: exit 1
      if: |
        contains(needs.*.result, 'failure') ||
          contains(needs.*.result, 'cancelled')
