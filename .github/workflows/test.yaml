# SPDX-FileCopyrightText: 2024 Tobias BÃ¶hm <code@aibor.de>
#
# SPDX-License-Identifier: GPL-3.0-or-later

name: Test

on:
  push:
    branches:
      - "main"
      - "dev/*"
  pull_request:
    branches:
      - "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  go-setup:
    name: Go setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Go mod tidy
        run: go mod tidy && git diff --exit-code

      - name: Go mod verify
        run: go mod verify

  go-vuln-check:
    name: Go vulnerability check
    runs-on: ubuntu-latest
    needs:
      - go-setup
    steps:
      - name: Go vulnerability check
        uses: golang/govulncheck-action@v1
        with:
          go-version-file: go.mod
          go-package: -test ./...

  go-gen-check:
    name: Go generate check
    runs-on: ubuntu-latest
    needs:
      - go-setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Go generate
        run: go generate ./... && git diff --exit-code

  go-lint:
    name: Go lint
    runs-on: ubuntu-latest
    needs:
      - go-setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run vet with all constraints
        run: go vet -tags integration,integration_sysinit ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: "v2.1"
          args: "--build-tags integration,integration_sysinit ./..."

  reuse-lint:
    name: FSFE REUSE Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v5

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

  goreleaser-lint:
    name: Goreleaser check
    runs-on: ubuntu-latest
    needs:
      - go-setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: check

  integration-tests:
    name: Run integration tests
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/aibor/virtrun-test:latest
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache go
        uses: actions/cache@v4
        with:
          path: |
            /go/cache
            /go/pkg/mod
          key: go-${{ matrix.arch }}-${{ hashFiles('go.sum') }}

      - name: Run go generate testdata
        run: go generate -tags testdata ./internal/sys/gen_test.go

      - name: Run go generate integration tests
        env:
          GOARCH: ${{ matrix.arch }}
        run: go generate -tags integration ./internal/cmd/run_integration_test.go

      - name: Run tests
        env:
          SKIP: ${{ matrix.arch != 'amd64' && 'TestIntegration/linked' }}
          VIRTRUN_ARGS: "-kernel /kernel/${{ matrix.arch }}/vmlinuz-virt \
                         -transport pci \
                         -memory 128 \
                         -verbose \
                         -debug"
        run: |
          go test -v \
            -tags integration \
            -skip "${{ env.SKIP }}" \
            -covermode atomic \
            -coverprofile coverage.txt \
            ./internal/... \
            | go-junit-report -set-exit-code -iocopy -out junit-report.xml

      - name: Run go-cobertura
        run: gocover-cobertura -by-files < coverage.txt > coverage.xml

      - name: Upload test output
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-integration-${{ matrix.arch }}
          path: junit-report.xml
          retention-days: 2

      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        if: ${{ matrix.arch == 'amd64' }}
        with:
          name: go-coverage
          path: coverage*

  integration-tests-sysinit:
    name: Run integration tests of sysinit package and binaries
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/aibor/virtrun-test:latest
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache go
        uses: actions/cache@v4
        with:
          path: |
            /go/cache
            /go/pkg/mod
          key: go-${{ matrix.arch }}-${{ hashFiles('go.sum') }}

      - name: Build virtrun
        run: go build -buildvcs=false -o /virtrun .

      - name: Run sysinit test
        env:
          GOARCH: "${{ matrix.arch }}"
          VIRTRUN_ARGS: "-kernel /kernel/${{ matrix.arch }}/vmlinuz-virt \
                         -addModule /kernel/${{ matrix.arch }}/tun.ko.gz \
                         -addModule /kernel/${{ matrix.arch }}/veth.ko.gz \
                         -transport pci \
                         -standalone \
                         -verbose \
                         -debug"
        run: |
          go test -v \
            -tags integration_sysinit \
            -exec /virtrun \
            -covermode atomic \
            -coverprofile coverage.txt \
            -coverpkg ./sysinit \
            ./sysinit \
            ./internal/virtrun/init/cmd \
            -testModules tun,veth \
            | go-junit-report -set-exit-code -iocopy -out junit-report-sysinit.xml

      - name: Run go-cobertura
        run: gocover-cobertura -by-files < coverage.txt > coverage.xml

      - name: Upload test output
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-integration-sysinit-${{ matrix.arch }}
          path: junit-report*.xml
          retention-days: 2

      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        if: ${{ matrix.arch == 'amd64' }}
        with:
          name: go-coverage-sysinit
          path: coverage*

  results:
    if: always()
    runs-on: ubuntu-latest
    name: Test Results
    needs:
      - go-vuln-check
      - go-gen-check
      - go-lint
      - integration-tests
      - integration-tests-sysinit
      - reuse-lint
      - goreleaser-lint
    steps:
    - run: exit 1
      if: |
        contains(needs.*.result, 'failure') ||
          contains(needs.*.result, 'cancelled')
